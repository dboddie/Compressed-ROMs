; Copyright (C) 2015 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $8000

rom_start:
.byte 0, 0, 0
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
.byte 1

; Title string
.byte "Decoder", 0

; Version string
.byte "1.00", 0

copyright_string:
.byte "(C)2015 David Boddie", 0

; Second processor relocation address
.byte 0, $80, 0, 0

service_entry:

    cmp #4
    beq service_command

    service_entry_exit:
    rts

commands:
.byte <decode_name, >decode_name

decode_name: .byte "DECODE", 13

routines:
.byte <decode_command, >decode_command

service_command:

    tya                         ; push Y and X registers onto the stack
    pha
    txa
    pha

    clc
    tya         ; Store the address of the command line in an new address that
    adc $f2     ; can used zero-based post-indexed addressing.
    sta $a8
    lda $f3
    adc #0
    sta $a9
    clc

    ldx #0
    service_command_loop:

        lda commands,x
        sta $aa
        lda [commands + 1],x
        sta $ab

        ldy #0

        service_command_test_loop:

            lda ($aa),y
            cmp ($a8),y
            bne service_command_next
            iny
            cmp #13
            bne service_command_test_loop

        txa
        lda routines,x
        sta $aa
        lda [routines + 1],x
        sta $ab

        jmp ($aa)

        service_command_next:

        inx
        inx
        cpx #2
        bne service_command_loop

    service_command_not_found:
    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #4                      ; restore A
    rts

exit_rom:
service_command_claimed:

    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #0                      ; claim service command
    rts
